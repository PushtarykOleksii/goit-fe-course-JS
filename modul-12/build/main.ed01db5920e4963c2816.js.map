{"version":3,"sources":["webpack:///./fetchWeather.js","webpack:///./getGeoPosition.js","webpack:///./index.js"],"names":["baseUrl2","curentWeather","requestParam","refs","weatherSection","document","querySelector","button","icon","city","temp","humidity","wind","conditions","fetchWeather","query","fetch","then","response","json","weather","console","log","classList","remove","textContent","location","name","src","current","condition","innerHTML","temp_c","wind_kph","text","addEventListener","e","preventDefault","input","currentTarget","elements","value","options","timeout","maximumAge","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","PNotify","success","stack","dir1","dir2","firstpos1","firstpos2","catch","error"],"mappings":"6IACA,MAAMA,EAAW,0BACXC,EAAgB,gBAChBC,EAAe,+CAEfC,EAAO,CAETC,eAAgBC,SAASC,cAAc,YACvCC,OAAQF,SAASC,cAAc,kBAC/BE,KAAMH,SAASC,cAAc,SAC7BG,KAAMJ,SAASC,cAAc,SAC7BI,KAAML,SAASC,cAAc,SAC7BK,SAAUN,SAASC,cAAc,aACjCM,KAAMP,SAASC,cAAc,SAC7BO,WAAYR,SAASC,cAAc,gBAGxB,SAASQ,EAAaC,GACjCC,MAAMhB,EAAWC,EAAgBC,QAAqBa,KACrDE,KAAKC,GAAYA,EAASC,QAC1BF,KAAKG,IACJC,QAAQC,IAAIF,GAEZjB,EAAKC,eAAemB,UAAUC,OAAO,aACnCrB,EAAKM,KAAKgB,YAAcL,EAAQM,SAASC,KACzCxB,EAAKK,KAAKoB,IAAM,SAAWR,EAAQS,QAAQC,UAAUtB,KACrDL,EAAKO,KAAKqB,UAAYX,EAAQS,QAAQG,OAAS,IAC/C7B,EAAKQ,SAASc,YAAcL,EAAQS,QAAQlB,SAAW,IACvDR,EAAKS,KAAKa,YAAcL,EAAQS,QAAQI,SAAW,OACnD9B,EAAKU,WAAWY,YAAcL,EAAQS,QAAQC,UAAUI,OC7BjD,gBCKG7B,SAASC,cAAc,gBAG/B6B,iBAAiB,SAE3B,SAA2BC,GACzBA,EAAEC,iBACF,MAAMC,EAAQF,EAAEG,cAAcC,SAAS/B,KAAKgC,MAC5CpB,QAAQC,IAAI,UAAWgB,GACvBxB,EAAawB,KDdA,MACX,MAAMI,EAAU,CACdC,QAAS,IACTC,WAAY,MAEd,OAAO,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,UAAUC,YAAYC,mBAAmBJ,EAASC,EAAQL,MCYhEQ,GACGjC,KAAKS,IAEJZ,KADiBY,EAASyB,OAAOC,aAAa1B,EAASyB,OAAOE,aAE9DhC,QAAQC,IAAII,GACZ4B,IAAQC,QAAQ,CACZrB,KAAO,SACPsB,MAAO,CACLC,KAAM,OAAQC,KAAM,QACpBC,UAAW,IAAKC,UAAW,SAMlCC,MAAMC,IACLR,IAAQQ,MAAM,CACV5B,KAAO,oEACPsB,MAAO,CACLC,KAAM,OAAQC,KAAM,QACpBC,UAAW,IAAKC,UAAW","file":"main.ed01db5920e4963c2816.js","sourcesContent":["\nconst baseUrl2 = \"http://api.apixu.com/v1\";\nconst curentWeather = \"/current.json\";\nconst requestParam = \"?key=ea948e5e9c4e48f3a35170457190608&lang=uk\";\n\nconst refs = {\n    \n    weatherSection: document.querySelector(\"#weather\"),\n    button: document.querySelector(\".search-button\"),\n    icon: document.querySelector(\".icon\"),\n    city: document.querySelector(\".city\"),\n    temp: document.querySelector(\".temp\"),\n    humidity: document.querySelector(\".humidity\"),\n    wind: document.querySelector(\".wind\"),\n    conditions: document.querySelector(\".conditions\")\n  };\n\nexport default function fetchWeather(query) {\n    fetch(baseUrl2 + curentWeather + requestParam + `&q=${query}`)\n    .then(response => response.json())\n    .then(weather => {\n      console.log(weather);\n      // let jsonObject = weather;\n      refs.weatherSection.classList.remove(\"is-hidden\");\n        refs.city.textContent = weather.location.name;\n        refs.icon.src = \"https:\" + weather.current.condition.icon;\n        refs.temp.innerHTML = weather.current.temp_c + \"C\";\n        refs.humidity.textContent = weather.current.humidity + \"%\";\n        refs.wind.textContent = weather.current.wind_kph + \"km/h\";\n        refs.conditions.textContent = weather.current.condition.text;\n      });\n  }\n  ","export default () => {\n    const options = {\n      timeout: 5000,\n      maximumAge: 1000 * 60 * 30\n    };\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n\n  ","import \"./styles.css\";\nimport 'pnotify/src/PNotifyBrightTheme.css';\nimport fetchWeather from \"./fetchWeather.js\";\nimport getCurrentPosition from \"./getGeoPosition.js\";\nimport PNotify from 'pnotify/dist/es/PNotify.js';\nconst serchForm = document.querySelector(\".search-form\");\n\n// refs.button.addEventListener(\"click\", findWeatherDetails);\nserchForm.addEventListener(\"submit\", handlerFormSubmit);\n\nfunction handlerFormSubmit(e) {\n  e.preventDefault();\n  const input = e.currentTarget.elements.city.value;\n  console.log(\"input :\", input);\n  fetchWeather(input);\n}\n\n\ngetCurrentPosition()\n  .then(location => {\n    const query = `${location.coords.latitude}, ${location.coords.longitude}`;\n    fetchWeather(query);\n    console.log(location);\n    PNotify.success({\n        text:  \"Hello!\",\n        stack: {\n          dir1: 'down', dir2: 'right', //  from the top left corner.\n          firstpos1: 600, firstpos2: 600 // 90px from the top, 90px from the left.\n        }\n      }\n     \n    );\n  })\n  .catch(error => {\n    PNotify.error({\n        text:  \"Нет прав доступа к геопозиции, используйте поиск по имени города.\",\n        stack: {\n          dir1: 'down', dir2: 'right', //  from the top left corner.\n          firstpos1: 600, firstpos2: 600 // 90px from the top, 90px from the left.\n        }\n      }\n     \n    );\n  });\n"],"sourceRoot":""}